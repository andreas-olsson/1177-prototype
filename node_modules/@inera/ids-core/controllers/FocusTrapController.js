class t{constructor(t){this.hasAppliedFocusLoop=!1,this.setupFocusLoop=()=>{this.getFocusableContents().length>0&&!this.hasAppliedFocusLoop&&(this.getFirstFocusableContent().addEventListener("keydown",this.checkBackTab),this.getLastFocusableContent().addEventListener("keydown",this.checkTab),this.hasAppliedFocusLoop=!0),null!==this.host.getAttribute("autofocus")&&(this.isPopover?setTimeout((()=>{const t=this.host.querySelector(".ids-focus-anchor")||this.host.shadowRoot?.querySelector(".content-column");this.checkForWrapper(t)?.focus()}),0):setTimeout((()=>{const t=this.host.querySelector(".ids-focus-anchor")||this.getFirstFocusableContent();this.checkForWrapper(t)?.focus()}),0))},this.checkBackTab=t=>{9==t.keyCode&&t.shiftKey&&(t.preventDefault(),this.getLastFocusableContent().focus())},this.checkTab=t=>{9!=t.keyCode||t.shiftKey||(t.preventDefault(),this.getFirstFocusableContent().focus())},this.host=t,this.host.addController(this)}get isPopover(){return"ids-popover-content"===this.host.tagName.toLocaleLowerCase()}hostConnected(){this.isPopover?this.host.parentElement?.addEventListener("changedVisibility",this.setupFocusLoop):this.host.addEventListener("changedVisibility",this.setupFocusLoop)}hostDisconnected(){this.isPopover?this.host.parentElement?.removeEventListener("changedVisibility",this.setupFocusLoop):this.host.removeEventListener("changedVisibility",this.setupFocusLoop),this.hasAppliedFocusLoop&&(this.getFirstFocusableContent()?.removeEventListener("keydown",this.checkBackTab),this.getLastFocusableContent()?.removeEventListener("keydown",this.checkTab))}getFocusableContents(){let t=[];this.isPopover&&t.push(this.host.shadowRoot?.querySelector(".content-column"));let e=Array.from(this.host.querySelectorAll('button:not(.ids-dialog-trigger), ids-button:not(.ids-dialog-trigger), [href]:not(.ids-dialog-trigger), input:not(.ids-dialog-trigger), select:not(.ids-dialog-trigger), textarea:not(.ids-dialog-trigger), [tabindex]:not([tabindex="-1"]):not(.ids-dialog-trigger)'));return e=e.map((t=>this.checkForWrapper(t))),t.push(...e),t}getFirstFocusableContent(){return this.host.shadowRoot?.querySelector(".ids-dialog__header__button")||this.getFocusableContents()[0]}getLastFocusableContent(){const t=this.getFocusableContents();return this.checkForWrapper(t[t.length-1])}checkForWrapper(t){return t?.classList.contains("ids-contains-clickable")?t.children[0]:t}}export{t as FocusTrapController};
