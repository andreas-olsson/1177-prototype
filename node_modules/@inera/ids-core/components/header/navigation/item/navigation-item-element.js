import{__decorate as t}from"tslib";import{LitElement as e,html as i}from"lit";import{property as s,state as o}from"lit/decorators.js";import n from"../../../styles/global-styles.js";import{stylesBase as l,styles1177pro as d,stylesInera as r,stylesIneraAdmin as c,stylesIneraLegacy as a,stylesIneraAdminLegacy as p}from"./navigation-item-styles.js";import{generateId as h}from"../../../../utilities/utils.js";class u extends e{constructor(){super(...arguments),this.label="",this.type=void 0,this.link=!1,this.fluid=!1,this.active=!1,this.expanded=!1,this.unresponsive=!1,this.isExpanded=!1,this.contentId=h(),this.detectClickOutside=t=>{this.contains(t.target)||(this.isExpanded=!1)}}get linkText(){return this.querySelector("a")?.innerText}disconnectedCallback(){document.removeEventListener("click",this.detectClickOutside),super.disconnectedCallback()}firstUpdated(t){super.firstUpdated(t),this.querySelectorAll("ids-link").forEach((t=>{t.setAttribute("activeicon","true"),t.setAttribute("colorpreset","2");const e=t.querySelector(".ids-icon");e?.setAttribute("width","10px"),e?.setAttribute("height","10px")})),this.isExpanded=this.expanded,document.addEventListener("click",this.detectClickOutside)}toggleActive(){this.isExpanded=!this.isExpanded}renderContent(){return this.isExpanded?i`<div id="${this.contentId}" class="header-nav-item-content"><ids-container ?fluid="${this.fluid}" gutterless><ids-row class="mega-menu-row"><ids-col cols="3"><slot name="col-1"></slot></ids-col><ids-col cols="3"><slot name="col-2"></slot></ids-col><ids-col cols="3"><slot name="col-3"></slot></ids-col><ids-col cols="3"><div class="nav-item-content"><slot name="col-4"></slot></div></ids-col></ids-row></ids-container></div>`:i``}clickLink(){this.querySelector("a")?.click()}renderNavItem(){return this.link?i`<span class="nav-item ${this.active?"active":""}">${this.linkText}<slot></slot></span>`:i`<button aria-controls="${this.contentId}" aria-expanded="${this.isExpanded}" class="btn-no-styles nav-item ${this.isExpanded?"expanded":""} ${this.active?"active":""}" @click="${this.toggleActive}">${this.label}</button>`}render(){return i`${this.renderNavItem()} ${this.renderContent()}`}}u.styles=[n,l,d,r,c,a,p],t([s({type:String,reflect:!0})],u.prototype,"label",void 0),t([s({type:String,reflect:!0})],u.prototype,"type",void 0),t([s({type:Boolean})],u.prototype,"link",void 0),t([s({type:Boolean})],u.prototype,"fluid",void 0),t([s({type:Boolean})],u.prototype,"active",void 0),t([s({type:Boolean})],u.prototype,"expanded",void 0),t([s({type:Boolean,reflect:!0})],u.prototype,"unresponsive",void 0),t([o()],u.prototype,"isExpanded",void 0);export{u as IDSHeaderNavItem};
