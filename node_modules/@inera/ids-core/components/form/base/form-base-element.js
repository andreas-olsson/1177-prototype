import{__decorate as t}from"tslib";import{LitElement as e,html as r}from"lit";import{state as o,property as i}from"lit/decorators.js";import{AriaController as s}from"../controller/AriaController.js";import{IconController as l}from"../controller/IconController.js";import{LabelController as n}from"../controller/LabelController.js";import{InputController as a}from"../controller/InputController.js";import{ErrorController as h}from"../controller/ErrorController.js";import{EventController as p}from"../controller/EventController.js";import{StateController as u}from"../controller/StateController.js";class d extends e{constructor(){super(...arguments),this.isDisabled=!1,this.autofocus=!1,this.light=!1,this.novalidation=!1,this.invalid=!1,this.ariaController=new s(this),this.errorController=new h(this),this.labelController=new n(this),this.inputController=new a(this),this.eventController=new p(this),this.iconController=new l(this),this.stateController=new u(this),this.hasCreatedHintWrapper=!1,this.hasCreatedTooltipWrapper=!1}get input(){return this.querySelector("input")}get label(){return this.querySelector("label")}get textarea(){return this.querySelector("textarea")}get select(){return this.querySelector("select")}get errorMessage(){return this.querySelector("ids-error-message")}get icon(){return this.querySelector(".ids-icon")}get iconAppended(){return this.querySelector('[slot="append-icon"]')}get iconDirectChild(){return this.querySelector(":scope > .ids-icon")}get button(){return this.querySelector("ids-button")}get tooltip(){return this.querySelector('[slot="tooltip"]')}get inputField(){return this.input||this.textarea||this.select}get hint(){return this.querySelector('[slot="hint"]')}firstUpdated(t){super.firstUpdated(t),this.autofocus&&setTimeout((()=>{this.inputField?.focus()})),this.icon?.setAttribute("size","s"),this.label?.classList?.add("ids-label"),this.setupSlots()}setupSlots(){this.assignSlot(this.querySelector("label"),"label"),this.assignSlot(this.inputField,this.inputField?.tagName.toLowerCase()),this.assignSlot(this.errorMessage,"error-msg"),this.assignSlot(this.icon,"icon"),this.assignSlot(this.button,"button")}assignSlot(t,e){t&&this.shadowRoot?.querySelector(`slot[name="${e}"]`)&&t.setAttribute("slot",e)}createHintWrapper(){if(this.hasCreatedHintWrapper)return null;var t=document.createElement("div");t.classList.add("ids-input__hint"),this.hint.parentNode.insertBefore(t,this.hint),t.appendChild(this.hint),this.hasCreatedHintWrapper=!0}renderHint(){if(this.querySelector('[slot="hint"]'))return this.createHintWrapper(),r`<slot name="hint"></slot>`}createTooltipWrapper(){const t="checkbox"===this.inputField?.getAttribute("type"),e="radio"===this.inputField?.getAttribute("type");if(this.hasCreatedTooltipWrapper||t||e)return null;var r=document.createElement("div");r.classList.add("ids-label-wrapper"),this.label.parentNode.insertBefore(r,this.label),r.appendChild(this.label),r.appendChild(this.tooltip),this.hasCreatedTooltipWrapper=!0}renderLabel(){return this.querySelector("[slot=tooltip]")?(this.createTooltipWrapper(),r`<slot name="label"></slot><slot name="tooltip"></slot>`):r`<slot name="label"></slot>`}render(){return r`<slot></slot>`}}t([o()],d.prototype,"isDisabled",void 0),t([i({type:Boolean})],d.prototype,"autofocus",void 0),t([i({type:Boolean,reflect:!0})],d.prototype,"light",void 0),t([i({type:Boolean})],d.prototype,"novalidation",void 0),t([i({type:Boolean,reflect:!0})],d.prototype,"invalid",void 0);export{d as FormBaseElement};
