import { LitElement } from 'lit';
import { AriaController } from '../controller/AriaController';
import { IconController } from '../controller/IconController';
import { LabelController } from '../controller/LabelController';
import { InputController } from '../controller/InputController';
import { ErrorController } from '../controller/ErrorController';
import { EventController } from '../controller/EventController';
import { StateController } from '../controller/StateController';
export declare class FormBaseElement extends LitElement {
    isDisabled: boolean;
    autofocus: boolean;
    light: boolean;
    novalidation: boolean;
    invalid: boolean;
    protected ariaController: AriaController;
    protected errorController: ErrorController;
    protected labelController: LabelController;
    protected inputController: InputController;
    protected eventController: EventController;
    protected iconController: IconController;
    protected stateController: StateController;
    get input(): HTMLInputElement | null;
    get label(): HTMLElement | null;
    get textarea(): HTMLTextAreaElement | null;
    get select(): HTMLSelectElement | null;
    get errorMessage(): import("../error-message/error-message-element").IDSErrorMessage;
    get icon(): Element;
    get iconAppended(): Element;
    get iconDirectChild(): Element;
    get button(): import("../../button/button-element").IDSButton;
    get tooltip(): Element;
    get inputField(): HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement;
    get hint(): Element;
    hasCreatedHintWrapper: boolean;
    hasCreatedTooltipWrapper: boolean;
    firstUpdated(_changedProperties: Map<string | number | symbol, unknown>): void;
    setupSlots(): void;
    assignSlot(component: HTMLElement | null, slot: string): void;
    createHintWrapper(): void;
    renderHint(): import("lit-html").TemplateResult<1>;
    createTooltipWrapper(): void;
    renderLabel(): import("lit-html").TemplateResult<1>;
    render(): import("lit-html").TemplateResult<1>;
}
