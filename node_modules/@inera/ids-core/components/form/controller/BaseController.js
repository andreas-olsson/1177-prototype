class t{constructor(t){this.errorMessageId="",this.host=t}get errorMessage(){return this.host.querySelector("ids-error-message")}get inputField(){return this.input||this.textarea||this.select}get input(){return this.host.querySelector("input")}get textarea(){return this.host.querySelector("textarea")}get select(){return this.host.querySelector("select")}get label(){return this.host.querySelector("label")}get button(){return this.host.querySelector("ids-button")}get icon(){return this.host.shadowRoot?.querySelector(".ids-icon")||this.host.querySelector(".ids-icon")}get hint(){return this.host.querySelector('[slot="hint"]')}showErrorMessage(){this.errorMessage&&(this.errorMessage.style.display="block")}hideErrorMessage(){this.errorMessage&&(this.errorMessage.style.display="none")}dispatchValidationEvent(t){let e=new CustomEvent("onValidation",{detail:{valid:t}});this.host.dispatchEvent(e)}setInputInvalid(t){this.errorMessage&&t.setAttribute("aria-describedby",this.errorMessageId),t.setAttribute("aria-invalid","true"),this.host.setAttribute("valid","false"),this.dispatchValidationEvent(!1)}setInputValid(t){this.errorMessage&&t.removeAttribute("aria-describedby"),t.removeAttribute("aria-invalid"),this.host.setAttribute("valid","true"),this.dispatchValidationEvent(!0)}}export{t as BaseController};
