import{BaseController as s}from"./BaseController.js";class e extends s{constructor(s){super(s),this.idsInputs=[],this.checkGroupValidity=()=>{this.idsInputs.find((s=>s.invalid))?this.showErrorMessage():this.hideErrorMessage()},this.host.addController(this)}get sharedErrorMessage(){return Array.from(this.host.childNodes).find((s=>"ids-error-message"===s.nodeName.toLowerCase()))}hostConnected(){super.hostConnected(),this.setupGroupValidationListeners()}isRadioGroup(){return this.host.tagName.includes("RADIO")}isCheckboxGroup(){return this.host.tagName.includes("CHECKBOX")}isSelectMultiple(){return this.host.tagName.includes("SELECT-MULTIPLE")}setupGroupValidationListeners(){let s=!0;setTimeout((()=>{if(this.isRadioGroup()?this.idsInputs=Array.from(this.host.querySelectorAll("ids-radio")):this.isCheckboxGroup()||this.isSelectMultiple()?this.idsInputs=Array.from(this.host.querySelectorAll("ids-checkbox")):s=!1,s){const s=new MutationObserver((s=>{s.forEach((s=>{"attributes"==s.type&&"invalid"===s.attributeName&&this.checkGroupValidity()}))}));this.idsInputs.forEach((e=>{s.observe(e,{attributes:!0})})),this.checkGroupValidity()}}))}showErrorMessage(){this.sharedErrorMessage&&(this.sharedErrorMessage.show=!0)}hideErrorMessage(){this.sharedErrorMessage&&(this.sharedErrorMessage.show=!1)}}export{e as GroupErrorController};
