import{BaseController as t}from"./BaseController.js";import{generateId as s}from"../../../utilities/utils.js";class e extends t{constructor(t){super(t),this.inputs=[],this.setupGroupErrorController=async()=>{await this.host.updateComplete,this.host.getAttribute("valid")&&"true"!==this.host.getAttribute("valid")||this.hideErrorMessage(),this.sharedErrorMessage&&(this.errorMessageId=s(),this.sharedErrorMessage.setAttribute("id",this.errorMessageId),"novalidation"in this.host&&!this.host.novalidation&&this.setupGroupValidationListeners())},this.checkGroupValidity=()=>{if(this.isRadioGroup()){const t=void 0!==this.inputs.find((t=>t.checked));this.handleGroupValidity(t)}if(this.isCheckboxGroup()||this.isSelectMultiple()){const t=-1===this.inputs.filter((t=>t.required)).findIndex((t=>!t.checked));this.handleGroupValidity(t)}},this.handleGroupValidity=t=>{t?(this.inputs.forEach((t=>{this.getWrapper(t)?.setAttribute("valid","true"),this.setInputValid(t)})),this.hideErrorMessage()):(this.inputs.forEach((t=>{t.required&&!t.checked?(this.setInputInvalid(t),this.getWrapper(t)?.setAttribute("valid","false"),this.host.setAttribute("valid","true")):(this.setInputValid(t),this.getWrapper(t)?.setAttribute("valid","true"),this.host.setAttribute("valid","false"))})),this.showErrorMessage())},this.host.addController(this)}get sharedErrorMessage(){return Array.from(this.host.childNodes).find((t=>"ids-error-message"===t.nodeName.toLowerCase()))}hostConnected(){this.setupGroupErrorController()}isRadioGroup(){return this.host.tagName.includes("RADIO")}isCheckboxGroup(){return this.host.tagName.includes("CHECKBOX")}isSelectMultiple(){return this.host.tagName.includes("SELECT-MULTIPLE")}getWrapper(t){if(this.isCheckboxGroup()||this.isSelectMultiple())return t.closest("ids-checkbox");if(this.isRadioGroup())return t.closest("ids-radio");throw new Error("Cant find checkbox nor radio input")}showErrorMessage(){this.sharedErrorMessage&&(this.sharedErrorMessage.style.display="block")}hideErrorMessage(){this.sharedErrorMessage&&(this.sharedErrorMessage.style.display="none")}setupGroupValidationListeners(){this.inputs=Array.from(this.host.querySelectorAll("input")),this.inputs.forEach((t=>{t.addEventListener("invalid",(()=>this.handleGroupValidity(!1))),t.addEventListener("change",this.checkGroupValidity)}))}hostDisconnected(){this.inputs&&this.sharedErrorMessage&&this.inputs.forEach((t=>{t.removeEventListener("invalid",(()=>this.handleGroupValidity(!1))),t.removeEventListener("change",this.checkGroupValidity)}))}}export{e as GroupErrorController};
