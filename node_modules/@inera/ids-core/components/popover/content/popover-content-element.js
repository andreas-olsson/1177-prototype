import{__decorate as t}from"tslib";import{LitElement as s,html as o}from"lit";import{property as i}from"lit/decorators.js";import{FocusTrapController as e}from"../../../controllers/FocusTrapController.js";import l from"../../styles/global-styles.js";import p from"./popover-content-styles.js";class h extends s{constructor(){super(...arguments),this.focusTrapController=null,this.nofocustrap=!1,this.maxwidth="260px",this.maxheight="260px",this.autofocus=!1,this.position="bottom",this.visible=!1,this.srclosetext="StÃ¤ng",this.detectEsc=t=>{27===t.keyCode&&this.visible&&this.closePopover()}}get popover(){return this.closest("ids-popover")}firstUpdated(t){super.firstUpdated(t),this.setAttribute("slot","popover-content"),this.addEventListener("keydown",this.detectEsc),this.nofocustrap||(this.focusTrapController=new e(this))}disconnectedCallback(){super.disconnectedCallback(),this.removeEventListener("keydown",this.detectEsc)}updated(t){t.has("visible")&&(this.setSize(),this.setOffset())}closePopover(){this.visible=!1,this.dispatchEvent(new CustomEvent("closed"))}async setSize(){this.style.maxWidth=this.maxwidth,this.style.maxHeight=this.maxheight}setOffset(){const t=this.offsetWidth,s=this.parentElement.offsetWidth,o=this.offsetHeight,i=this.parentElement.offsetHeight;"top"===this.position&&(this.style.left=`-${t/2-s/2}px`,this.style.bottom="calc(100% + 55px)"),"top-right"===this.position&&(this.style.right="0px",this.style.bottom="calc(100% + 55px)"),"top-left"===this.position&&(this.style.left="0px",this.style.bottom="calc(100% + 55px)"),"right"===this.position&&(this.style.left="calc(100% + 15px)",this.style.top=`-${o/2-i/2}px`),"right-top"===this.position&&(this.style.left="calc(100% + 15px)",this.style.top="0px"),"right-bottom"===this.position&&(this.style.left="calc(100% + 15px)",this.style.bottom="0px"),"bottom"===this.position&&(this.style.left=`-${t/2-s/2}px`,this.style.top="calc(100% + 15px)"),"bottom-right"===this.position&&(this.style.right="0px",this.style.top="calc(100% + 15px)"),"bottom-left"===this.position&&(this.style.left="0px",this.style.top="calc(100% + 15px)"),"left"===this.position&&(this.style.right="calc(100% + 15px)",this.style.top=`-${o/2-i/2}px`),"left-top"===this.position&&(this.style.right="calc(100% + 15px)",this.style.top="0px"),"left-bottom"===this.position&&(this.style.right="calc(100% + 15px)",this.style.bottom="0px")}render(){return o`<div class="popover"><ids-row class="popover-content ${this.position}"><ids-col class="close-btn-col" cols="auto"><button id="close-btn" aria-label="${this.srclosetext}" tabindex="0" @click="${this.closePopover}" class="btn-no-styles focusable close-btn"><ids-icon-close-bold color="var(--popover-icon_color)" class="focusable" width="20" height="20"></ids-icon-close-bold></button></ids-col><ids-col tabindex="0" class="content-column" style="max-width:${this.maxwidth};max-height:${this.maxheight}"><slot></slot></ids-col></ids-row></div>`}}h.styles=[l,p],t([i({type:Boolean})],h.prototype,"nofocustrap",void 0),t([i({type:String})],h.prototype,"maxwidth",void 0),t([i({type:String})],h.prototype,"maxheight",void 0),t([i({type:Boolean,reflect:!0})],h.prototype,"autofocus",void 0),t([i({type:String})],h.prototype,"position",void 0),t([i({type:Boolean,reflect:!0})],h.prototype,"visible",void 0),t([i({type:String,reflect:!0})],h.prototype,"srclosetext",void 0);export{h as IDSPopoverContent};
